* jvm
** 深入理解Java虚拟机
*** 自动内存管理机制
**** 运行时数据区域
#+BEGIN_SRC 
  线程共享数据区     线程隔离数据区
| Method Area |   | VM Stack | Native Method Stack |
|-------------+---+--------------------------------|
| Heap        |   | Program Counter Register       |

   执行引擎     ->  本地库接口 -> 本地方法库
#+END_SRC
1. pc
   存放一条字节码指令，用来完成 分支，循环，跳转，异常处理

   每个处理器都会有一个独立的pc，各条线程之间的计数器不影响

   pc是唯一一个在jvm中没有规定OutofMemoryError情况的内存区域
2. vm stack
   为执行java方法服务
   
   stack 用于存储 局部变量、操作栈、动态链接、方法出口等

   每一个方法被调用直至完成的过程，就是对应一个栈帧在虚拟机栈中从入栈到出栈的过程

   方法运行期间不会改变局部变量表的大小

   StackOverFlowError 和 OutOfMemoryError 
3. Native Method Stacks

   为jvm使用Native方法服务

   不同的虚拟机的native方法实现都不同,语言也不同

   StackOverFlowError 和 OutOfMemoryError 
4. Heap
   此内存区域的唯一目的就是存放对象实例
   
   虚拟机启动时创建,线程共享内存最大的一块

   -Xmx和-Xms控制堆内存扩展

   OutOfMemoryError
5. Method Area
   此共享内存区,用来存放被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据

   方法区被描述为堆的一个逻辑部分

   Hotspot虚拟机上,人们把方法区称为"永久代" Permanent Generation

   gc在这个方法区比较少,但也不是永久的,回收的目标主要是对常量池的回收、类型的卸载

   OutOfMemoryError

   运行时常量池: 编译期生成的各种字面量和符号引用
   
**** jvm监控与故障处理工具
1. jps jinfo
   运行的使用jvm的进程
2. jstat 
   
   jstat -gc 24612 250 10 250ms查询一次24612进程的gc情况，10次
3. jstack

4. jconsole
   
  内存监控 jstat 
   
  线程监控 jstack

5. Visual VM

*** 高效并发
1. java内存模型
   存储设备 (内存) < 高速缓存  < 处理器 
   计算操作从缓存同步内存设备中的数据，这样处理器就无须等待缓慢的内存读写

   多处理器系统内,每一个处理器都有自己的高速缓存,同时共享一个主内存，就会导致各自的缓存不一致,所以高速缓存要遵循一些协议
   
   java内存模型 JMM 的设计同上，在多个线程并发处理的时候，jvm采用ava内存模型来缓存存储设备上的数据,来实现高效并发

2. java与线程 

   线程既可以共享进程资源(内存地址、文件IO)，又可以独立调度(线程是CPU调度的最基本单位)

   java.lang.Thread类的实例就是一个线程
   
   
